CHIP JMP {
    // zr = zero; ng = negative; ps = positive;
    IN zr, ng, instruction[3], c;
    OUT load, inc;

    PARTS:

//    if zr != 1 && negative != 1 : positive
    Or(a=zr, b=ng, out=zrORng);
    Not(in=zrORng, out=ps);

    // NULL or JGT
    Mux(a=false, b=ps, sel=instruction[0], out=NULLorJGT);
    // JEQ or JGE
    Or(a=zr, b=ps, out=zrORps);
    Mux(a=zr, b=zrORps, sel=instruction[0], out=JEQorJGE);
    // JLT JNE
    Not(in=zr, out=notZr);
    Mux(a=ng, b=notZr, sel=instruction[0], out=JLTorJNE);
    // JLE or JMP
    Mux(a=zrORng, b=true, sel=instruction[0], out=JLEorJMP);

    // NULLorJGT or JEQorJGE
    Mux(a=NULLorJGT, b=JEQorJGE, sel=instruction[1], out=up);

    // JLTorJNE or JLEorJMP
    Mux(a=JLTorJNE, b=JLEorJMP, sel=instruction[1], out=down);

    Mux(a=up, b=down, sel=instruction[2], out=last);

    // if its not a C instruction, then, output Zero
    Mux(a=last, b=false, sel=c, out=out, out=load);
    Not(in=out, out=inc);



}